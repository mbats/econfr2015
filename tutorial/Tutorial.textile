h1. Sirius Workshop: Advanced graphical editors for your DSL

h2. Overview

This tutorial explains how to use advanced features of Sirius:
* "Edge Creation Tool with preconditions":#Edge_Creation_Tool
* "Reconnect Edge Tool":#Reconnect_Edge_Tool
* "Delete Element Tool":#Delete_Element_Tool
* "Direct Edit Label Tool":#Direct_Edit_Label_Tool
* "SVG images":#SVG
* "Style Customization":#Style_Customization
* "Layers":#Layers
* "Filters":#Filters
* "Validation rules and Quick fixes":#Validation
* "Container with Sub Nodes and Bordered Nodes":#Container
* "Navigation through Double-click":#Double_Click
* "Table":#Table

The instructions start from a basic modeling tool that is the result of the Sirius "Starter Tutorial":https://wiki.eclipse.org/Sirius/Tutorials/4MinTutorial. This starting modeling tool just allows you to create diagrams which represent Men and Women linked by parental relationships. From this diagram you can also use the palette to create Men.

These instructions are based on a simple Domain Model which describes basic concepts about families.

The modeling workbench created with this tutorial will allow users to visualize the members of a family and their parental relationships on a graphical diagram. It will also provide tools to edit the model from the diagram.

!https://wiki.eclipse.org/images/1/16/Sirius_4mtuto_01.png!

h2(#Before_arriving). Before arriving to the tutorial

To participate to this tutorial, you need to :

h3. Install Obeo Designer 7

To download "Obeo Designer 7 Community Edition":http://www.obeodesigner.com/download
* "Windows 32 Bit":http://www.obeo.fr/download/release/designer/7.0/community/latest/packages/ObeoDesigner-Community-7.0-win32.win32.x86.zip / "64 Bit":http://www.obeo.fr/download/release/designer/7.0/community/latest/packages/ObeoDesigner-Community-7.0-win32.win32.x86_64.zip:"https://github.com/mbats/econfr2015/archive/master.zip"
* "Linux 32 Bit":http://www.obeo.fr/download/release/designer/7.0/community/latest/packages/ObeoDesigner-Community-7.0-linux.gtk.x86.zip / "64 Bit":http://www.obeo.fr/download/release/designer/7.0/community/latest/packages/ObeoDesigner-Community-7.0-linux.gtk.x86_64.zip
* "MacOS 64 Bit":http://www.obeo.fr/download/release/designer/7.0/community/latest/packages/ObeoDesigner-Community-7.0-macosx.cocoa.x86_64.zip

Then unzip ObeoDesigner-Community-7.0-xxx.xxx.xxx.zip

h3. Clone the tutorial Git repository

To clone "the tutorial git repository":https://github.com/mbats/econfr2015/:
* just download and unzip the provided zip: "TODO econfr2015.zip":TODO
* or clone it from the command line: @git clone @https://github.com/mbats/econfr2015.git@
* or clone it from Obeo Designer 7 with EGit: 
File > Import...:
!./images/sirius_tuto2_00-01.png!

Git > Projects from Git:
!./images/sirius_tuto2_00-02.png!

Clone URI:
!./images/sirius_tuto2_00-03.png!

Set @https://github.com/mbats/econfr2015.git@ in the field @URI@:
!./images/sirius_tuto2_00-04.png!
Then press _Next_ and select only the metamodel's related projects (see the next "Import the sample Domain Model projects":#Domain_Model section).

h3(#Domain_Model). Import the sample Domain Model projects

A modeling workbench allows users to create or visualize models of a given Domain Model defined with EMF (Ecore model).

This tutorial relies on a Domain Model (DSL) defining the basic concepts of families:

* A family is composed of several persons.
* Persons are men or women.
* A person has:
** a name,
** children,
** two parents,
** a father and a mother.
!https://wiki.eclipse.org/images/0/05/Sirius_4mtuto_02.png!

The domain model is implemented with several EMF projects that you need to import into your workspace.
Import these projects from the Git repository : @File > Import...@
!./images/sirius_tuto2_00-01.png!

Select @Git > Projects from Git@
!./images/sirius_tuto2_00-02.png!

Select @Existing local repository@
!./images/sirius_tuto2_01-01.png!

Select @econfr2015@
!./images/sirius_tuto2_01-02.png!

Select @Import existing Eclipse projects@
!./images/sirius_tuto2_01-03.png!

And select only the following projects:
* org.eclipse.sirius.sample.basifamily = Metamodel
* org.eclipse.sirius.sample.basifamily.edit = Edit generated by EMF
* org.eclipse.sirius.sample.basifamily.editor = Editor generated by EMF
!./images/sirius_tuto2_01-04.png!

At the end your current environment should look like this:
!./images/sirius_tuto2_01-05.png!

h3. Open the Sirius development environment

h4. Launch a new runtime from your Eclipse

To launch a new eclipse application click on _Run / Run Configurations_ and double click on _Eclipse Application_ to get a @New_configuration@. In order to comfortably run Sirius in your new runtime, you should add this option in your VM arguments :

@-XX:MaxPermSize=256m@

!https://wiki.eclipse.org/images/d/d0/Sirius_4mtuto_03.png!

h4. Select the Sirius perspective

In the new Eclipse runtime, select the _Sirius_ perspective.

!https://wiki.eclipse.org/images/8/8f/Sirius_4mtuto_06.png!

This perspective provides specific Sirius menus and a new kind of project (_Modeling Project_). A Modeling Project contains models and the corresponding graphical representations created with Sirius.

h4. Import a sample model and a basic odesign

A sample model is available from the git repository _File > Import... > Git > Projects from Git > Existing local repository > Add...> econfr2015 > Import existing Eclipse projects_. And select only the following projects:
* basifamily.sample = Model instance
* org.eclipse.sirius.sample.basifamily.design = Sirius specification project

!./images/sirius_tuto2_02-00.png!

Finally, your development environment should look like :
!./images/sirius_tuto2_02-00-1.png!

The wizard then installs a _Modeling Project_ containing a file named _example.basicfamily_.

!https://wiki.eclipse.org/images/9/99/Sirius_4mtuto_05-2.png!

Double-clicking on this sample model opens a tree editor generated by EMF.

This editor allows you to see the properties and relationships of the model elements.

!https://wiki.eclipse.org/images/d/de/Sirius_4mtuto_11.png!

A basic designer exists which already displays Men, Women and child relationship. It also provides a tool to create Men.

This designer is available in the project :
!./images/sirius_tuto2_02-00-2.png!

Before starting to extend this tool, first use it to create a diagram on the sample model: you will see this diagram evolve progressively with new features during this tutorial.

To activate this tool, open the _Viewpoints Selection_ wizard on the modeling project containing the sample model.

!./images/sirius_tuto2_02-01.png!

Then select the _persons_ viewpoint.

!./images/sirius_tuto2_02-02.png!

Now you can create a diagram on the _Family_ object: menu @New Representation@.

!./images/sirius_tuto2_02-03.png!

h3. Using git tag to go ahead

h4(#differences). View differences

At any moment during the tutorial, to see the differences between your _working on_ version and the expected one you can do a @git diff@. For example, when you are on the @initial_state@ you can do:
* from the command line: @git diff creation@
!./images/sirius_tuto2_03-02.png!
* from Obeo Designer with EGit and EMF Compare: Select the _basicfamily.odesign_, right click _Compare with > Branch, Tag or Reference..._ and select the tag:
!./images/sirius_tuto2_03-03.png!

The EMF Compare view opens showing the differences:
!./images/sirius_tuto2_03-04.png!

h4(#tag). Go directly to a specified tag

If you want to skip some steps, you can get directly the result of a step thanks to: @git reset --hard xxx@. For example, when you are on the @initial_state@ you can go directly to the result of the _Creation_ step:
* from the command line: @git reset --hard creation@
* from Obeo Designer with EGit: Select the project @org.eclipse.sirius.sample.basicfamily.design@ from the Model Explorer and right click to select @Team > Reset > Tags@. Select a tag and in the reset type the _*Hard*_ radio button: 
!./images/sirius_tuto2_03-05.png!

If you have a look to the _odesign_ file, it is updated with the expected changes.

h2. Start the tutorial

h3. Creation tool

The first step of this tutorial consists in completing the basic modeler with a tool to create _Women_ also.

Copy and paste the tool _CreateMan_, then replace Man by _Woman_:
* in the _Id_ of the tool
* in the _Node Mappings_ of the tool (use the wizard to select _WomanNode_)  
* in the _Create Instance_ operation (under the _Begin_ section)
* in the _Value Expression_ of the _Set_ (under the _Create_ instance)

!./images/sirius_tuto2_03-01.png!

To see the "result":#differences, have a look on the "tag":#tag : @creation@

h3(#Edge_Creation_Tool). Edge Creation Tool

An _Edge Creation_ tool allows the user to create relationships directly from the diagram, by using the palette.

Let's use this tool to allow the user to set the father and the mother of a Person.

Right click on the _Section_ and select the menu @New Element Creation > Edge Creation@

!./images/sirius_tuto2_04-01.png!

Give an Id to this tool (setFather) and associate it to _fatherEdge_, the _Edge Mapping_ which defines the father graphical relation.

!./images/sirius_tuto2_04-02.png!

Then define the operations that will be performed by this tool each time the user will click on it. These operations can use four variables that are automatically set by Sirius:
* **source**: the first object on which the user has clicked (the source of the relation is is going to create)
* **target**: the second object on which the user has clicked (the target of the relation is is going to 
* **sourceView**: the graphical object representing the source
* **targetView**: the graphical object representing the target

Under the _Begin_ object, create a _Change Context_ and set its _Browse Expression_ to _var:source_ in order to define the execution context of the next operations.

!./images/sirius_tuto2_04-03.png!

!./images/sirius_tuto2_04-04.png!

Under the _Change Context_ create a _Set_ which will set the _father_ of the first Person clicked (source) to the second Person clicked (target):
* Feature Name: father
* value Expression: var:target 

!./images/sirius_tuto2_04-05.png!

!./images/sirius_tuto2_04-06.png!

Save the _odesign_ file and you will see a new tool _setFather_ in the palette.

!./images/sirius_tuto2_04-07.png!

h4. Precondition

To prevent the user to create a father relationship from a person to itself, or to one of its children, you can add a precondition expression (written in Acceleo 3).

!./images/sirius_tuto2_04-08.png!

This expression uses to new variables:
* **preSource**: the object on which the user has clicked first
* **preTarget**: the object under the cursor

With this precondition, the tool will prevent the creation of forbidden links by showing a specific icon.

!./images/sirius_tuto2_04-09.png!

Then copy, paste and update this tool to create the _setMother_ tool.

To see the "result":#differences, have a look on the "tag":#tag : @edge_creation_precondition@

h3(#Reconnect_Edge_Tool). Reconnect Edge Tool

A _Reconnect Edge_ tool allows the user to change the end of a relationship by moving it directly from the diagram.

Let's create a _Reconnect Edge_ tool to change the _father_ and the _mother_ of a Person.

Right click on the _Section_ and select the menu @New Element Edition > Reconnect Edge@.

!./images/sirius_tuto2_05-01.png!

Associate the _fatherEdge_ to this reconnect tool.

!./images/sirius_tuto2_05-02.png!

This tool comes with six variables:
* **source**: the object currently attached to the moved end
* **target**: the object going to be attached to the moved end
* **sourceView**: the graphical object representing source
* **targetView**: the graphical object representing target
* **element**: the object attached to the other end
* **elementView**: the graphical object representing element

Then create a _Change Context_ and set its expression to _var:element_ (the person who will change its father) 

Finally, create a _Set_ to assign the new selected parent (_var:target_) as _father_ of this person.

!./images/sirius_tuto2_05-03.png!

Copy, paste and update this tool to create a reconnect tool for _mother_ relationship.

A Reconnect Edge tool allows the user to change the end of a relationship by moving it directly from the diagram.

Let's create a reconnect edge tool to change the father and the mother of a person.

Right click on the Section and select the menu @New Element Edition > Reconnect Edge@.

!./images/sirius_tuto2_05_01.png!

Associate the fatherEdge to this reconnect tool.

!./images/sirius_tuto2_05_02.png!

This tool comes with six variables:
* **source**: the object currently attached to the moved end
* **target**: the object going to be attached to the moved end
* **sourceView**: the graphical object representing source
* **targetView**: the graphical object representing target
* **element**: the object attached to the other end
* **elementView**: the graphical object representing element

Then create a _Change Context_ and set its expression to _var:element_ (the person who will change its father) 

Finally, create a _Set_ to assign the new selected parent (_var:target_) as _father_ of this person.

!./images/sirius_tuto2_05-03.png!

Copy, paste and update this tool to create a reconnect tool for _mother_ relationship.

To see the "result":#differences, have a look on the "tag":#tag : @reconnect_edge@

h3(#Delete_Element_Tool). Delete Element Tool

A _Delete Element_ tool specifies which actions have to be performed when the user hits the delete key on an diagram element.

It is necessary on elements which deletion can't be interpreted by Sirius (for example edges) or if you need to perform specific actions.

Let's create a _Delete Element_ tool to specify what to do when the user deletes a paretal relation.

Right click on the _Section_ and select the menu @New Element Edition > Delete Element@.

!./images/sirius_tuto2_06-01.png!

Associate the _fatherEdge_ to this Delete tool.

!./images/sirius_tuto2_06-02.png!

When deleting a edge, the variable **element** refers to the source of the relationship.

So, create a _Change Context_ and set its expression to _var:element_ (the person which is the children). Then create a _Unset_ on the feature _father_ to remove this relation.


!./images/sirius_tuto2_06-03.png!

Copy, paste and update this tool to create a delete tool for _mother_ relationship.

To see the "result":#differences, have a look on the "tag":#tag : @delete@

h3(#Direct_Edit_Label_Tool). Direct Edit Label Tool

A _Direct Edit Label_ specifies how to interpret the modification of graphical object's label in order to modify the model. 

Let's create a _Direct Edit Label_ to change the name of a Person directly from the diagram.

Right click on the _Section_ and select the menu @New Element Edition > Direct Edit Label@.

!./images/sirius_tuto2_07-01.png!

Associate this tool to the objects which have a name: _ManNode_ and _WomanNode_

!./images/sirius_tuto2_07-02.png!

This tool comes with a mask that creates variables depending on the label's value. By default, the mask is set to _{O}_, which means that the variable named _0_ will contain the full value of the label.  

Create a _Set_ to indicate the feature of the edited object that will be modified (_name_) and the value to assign (_var:0_).

!./images/sirius_tuto2_07-03.png!

To see the "result":#differences, have a look on the "tag":#tag : @direct_edit@

h3(#SVG). SVG

Sirius supports SVG images to improve the quality of the diagrams.

Because the current designer uses PNG images, resizing a Man or Woman on a diagram causes the pixelation of images.

!./images/sirius_tuto2_08-01.png!

Add _man.svg_ and _woman.svg_ in the _icons_ folder. TODO These SVG images are available on TODO.

!./images/sirius_tuto2_08-02.png!

Then replace these PNG images set to the styles of _ManNode_ and _WomanNode_ by SVG images. 

!./images/sirius_tuto2_08-03.png!

Finally, set a predefined size to adapt the SVG image to the same size than the 32x32 PNG image (here enter 4).

!./images/sirius_tuto2_08-04.png!

Close and re-open the diagram to allow Sirius to take the modification into account: now the images are no more pixelated.

!./images/sirius_tuto2_08-05.png!

To see the "result":#differences, have a look on the "tag":#tag : @svg@

h3(#Style_Customization). Style Customization

Style Customizations change graphical properties of diagram elements (color, label, size, ...) depending on conditions.
For example, let's change the label of a Person depending on the number of its children:
* Person without children => color label in gray
* Person having more than one children => set label size to 12
* Person having grandchildren => prefix label with _Grandpa_ or _Grandma_

Right click on the _Default Layer_ and select the menu @New Customization > Style Customizations@. It will group all the different customizations.

!./images/sirius_tuto2_09-01.png!

Right click on the _Style Customizations_ and select the menu @New Customization > Style Customization@ to create the first customization.

!./images/sirius_tuto2_09-02.png!

Enter the Acceleo3 expression associated to this customization: 
@[children->size()=0/]@

Then define the graphical properties that will change if the condition is met.

Right click on the _Style Customization_ and select the menu @New Customization@. To change the label color, create a _Property Customization (by selection)_. 

!./images/sirius_tuto2_09-03.png!

On this _Property Customization_, select the two _Workspace Images_ for the _Applied On_ field (they hold the label to change), enter @labelColor@ in the _Property Name_ field, then select the @gray@ color.

Note that you can use the automatic-completion to select the applicable property.

!./images/sirius_tuto2_09-04.png!

To see the "result":#differences, have a look on the "tag":#tag : @style_custo_select@

Create a second _Style Customizations_ with the condition:
@[children->size()>1/]@
and add a _Style Customization (by expression)_ to set the _labelSize_ to @12@.

!./images/sirius_tuto2_09-05.png!

Finally, create a third _Style Customizations_ with the condition:
@[children.children->size()>0/]@

Add a _Style Customization (by expression)_ for the _Workspace Image_ corresponding to the Man, enter the property name _labelExpression_ and the expression @['Grandpa '+name/]@ (to prefix the person name with _Grandpa_).

!./images/sirius_tuto2_09-06.png!

Do the same with the Woman image and the expression @['Grandma '+name/]@.

Save the _odesign_ file and see the result on the diagram.

!./images/sirius_tuto2_09-07.png!

To see the "result":#differences, have a look on the "tag":#tag : @style_custo_expr@

h3(#Layers). Layers

With Sirius it is possible to allocate specific graphical elements to layers that can be activated/deactivated on demand by the user.

Let's create two layers: one for the Men and one for the Women.

Right click on _Persons diagram_ and select the menu @New Diagram Element > Additional Layer@. 

!./images/sirius_tuto2_10-01.png!

Call this _Layer_ @Men@ and check the option _Active by default_.

!./images/sirius_tuto2_10-02.png!

Create a _Section_ in this layer then drag and drop all the elements related to the Man type into this layer.

!./images/sirius_tuto2_10-03.png!

Create a second _Layer_ @Women@ and drag and drop all the elements related to the Woman type.

Re-open the sample diagram. You can see the two optional layers Men and Women (selected by default).

!./images/sirius_tuto2_10-04.png!

If you de-activate the _Men_ layer, only women remain on the diagram. Note that the tools related to men have been hidden too.

!./images/sirius_tuto2_10-05.png!

To see the "result":#differences, have a look on the "tag":#tag : @layer@

h3(#Filters). Filters

With _Filters_, Sirius provides an additional mechanism to automatically show or hide elements of a diagram: a condition determines which elements remain visible.

Let's create a _Filter_ to hide Persons without children.

Right click on _Persons diagram_ and select the menu @New Filter > Composite Filter@. 

!./images/sirius_tuto2_11-01.png!

Set the _id_ to 'childrenFilter'.

Then create a _Mapping Filter_.

!./images/sirius_tuto2_11-02.png!

Associate _ManNode_ and _WomanNode_ to this filter and define the _Semantic Condition Expression_ : _[children->size()>0/]_

!./images/sirius_tuto2_11-03.png!

On the diagram, you can now select the filter _childrenFilter_ and see that only persons with children remain visible.

!./images/sirius_tuto2_11-04.png!

To see the "result":#differences, have a look on the "tag":#tag : @filter@

h3(#Validation). Validation Rules and Quick Fixes

Validation rules allow the user to evaluate the quality of a model.

For example, despite the precondition we have created on the edge creation tool, users can still create circular parental relations between two persons by using the Properties View.

Let's create a _Validation Rule_ to detect this problem.

Right click on _Persons diagram_ and select the menu @New Validation > Validation@. 

!./images/sirius_tuto2_12-01.png!

Set the name 'FamilyValidation' to this _Validation_. Then create a _Semantic Validation Rule_.

!./images/sirius_tuto2_12-02.png!

Set the properties of this rule:
* *Level*: @Error@
* *Target Class*: @basicfamily.Person@
* *Message*: @['Children of '+name+' should not include its father ('+father.name+')'/]@

!./images/sirius_tuto2_12-03.png!

Then create an _Audit_ (a condition corresponding to this rule) with the expression _[not children->includes(father)/]_.

!./images/sirius_tuto2_12-04.png!

To test this rule, introduce an error in ghe model with the Property View: set the father of a Man to its son.

!./images/sirius_tuto2_12-05.png!

Then right-click on the diagram and select the menu @Validate diagram@.

!./images/sirius_tuto2_12-06.png!

The circular father relationship is detected and a decorator (corresponding to the rule level) is displayed on the persons with this problem. A tootip contains the error message.

!./images/sirius_tuto2_12-07.png!

To see the "result":#differences, have a look on the "tag":#tag : @validation@

h4. Fix

_Fixes_ can be provided to the user for solving the problem automatically. 

For example, we can propose to unset one of the two _father_ relations.

Right-click on the _Rule_ and select the menu @New > Fix@.

!./images/sirius_tuto2_13-01.png!

Set the _name_ 'Unset father' to this _Fix_ and create a _Begin_. Then create a _Unset_ and enter _father_ in the _Feature name_.

!./images/sirius_tuto2_13-02.png!

If you open the _Problems View_, you can right-click on one of the errors and select the menu @Quick Fix@.

!./images/sirius_tuto2_13-03.png!

A dialog opens which proposes the available fixes.

!./images/sirius_tuto2_13-04.png!

Select _Unset father_ and click on _Finish_: the father of the selected person is automatically unset and the problem is solved.

!./images/sirius_tuto2_13-05.png!

To see the "result":#differences, have a look on the "tag":#tag : @validation_fix@

h3. Object-Centered Diagram

The _Persons diagram_ is a representation related to the whole model: it displays all the members of the family. This is the reason why it belongs to the Family instance, as you can see in the Model Explorer.

!./images/sirius_tuto2_14-01.png!

With Sirius, you can create a representation on any instance of the model. For example, let's create a person-centered diagram to show only the relationships of a given person.

Right-click on the _persons_ viewpoint and select the menu @New Representation > Diagram Description@.

!./images/sirius_tuto2_14-02.png!

Set these properties to this representation:
* _Name_: @Relationships diagram@
* _Domain Class_: @basicfamily.Person@

!./images/sirius_tuto2_14-03.png!

In the _Advanced_ tab, set the **Title Expression** to @['Relations of '+name/]@ in order to customize the name of the diagram with the person's name.

!./images/sirius_tuto2_14-04.png!

Add a _Default Layer_ to this diagram and save the _odesign_ file. Now, you can right click on a person in the _Model Explorer_ and create a new representation of type _Relationships diagram_.

!./images/sirius_tuto2_14-05.png!

The result is a blank diagram, since we have not yet specified its content.

h4(#Container). Container

A _Container_ is a kind of diagram element that can contain other diagram elements.

On the _Relationships diagram_, let's use two containers to represent:
* The current person (who owns the diagram) with:
** each children in a list
** its parents as border nodes
* The siblings of the current person:
** each sibling in a list

Right-click on the _Layer_ and select the menu @New Diagram Element > Container@.

!./images/sirius_tuto2_15-01.png!

For this first container, set these properties:
* _Name_: @Person Container@
* _Domain Class_: @basicfamilyPerson@
* _Semantic Candidate Expression_: @var:self@ (the current person)
* _Children Presentation_: @List@

!./images/sirius_tuto2_15-02.png!

To define the graphical rendering of this container, right-click on it and select the menu @New Style > Gradient@.

!./images/sirius_tuto2_15-03.png!

On this style, set these properties:
* Label Tab:
** *Label Size*: @12@
** *Label Format*: @bold@

!./images/sirius_tuto2_15-04.png!

* Color Tab:
** *Foreground Color*: @light_green@

!./images/sirius_tuto2_15-05.png!

Save the _odesign_ file and you see a green container appear on the diagram that you have created for a person.

!./images/sirius_tuto2_15-06.png!

To see the "result":#differences, have a look on the "tag":#tag : @container@


h4. Sub Nodes

Now, to display children inside this container, right-click on the container definition and click on the menu @New Diagram Element > Sub Node@.

!./images/sirius_tuto2_16-01.png!

On the _Sub Node_ set these properties:
* _Id_: @ChildrenNode@
* _Domain Class_: @basicfamily.Person@
* _Semantic Candidate Expression_: @feature:children@

!./images/sirius_tuto2_16-02.png!

Then create a style. Note that the kind of style is not important here: for elements in a list, the style is used only to specify the label.

!./images/sirius_tuto2_16-03.png!

Save the _odesign_ file, and now you can see the children listed inside the container.

!./images/sirius_tuto2_16-04.png!

To see the "result":#differences, have a look on the "tag":#tag : @sub_node@

Copy paste _PersonContainer_ to create the container for siblings.

Change these properties on this new container description:
* Container > _Name_: @SiblingsContainer@
* Gradient > _Label Size_: @10@
* Gradient > _Label Expression_: @Siblings@
* Gradient > _Foreground Color_: @light_yellow@

And these properties on the _Sub Node_:
* *Id*: @Sibling Node@
* *Semantic Candidates Expression*: @[parents.children->excluding(self)/]@

!./images/sirius_tuto2_16-05.png!

Save the _odesign_ file, and now you can see the siblings listed inside a second container.

!./images/sirius_tuto2_16-06.png!

h4. Border Node

Now let's add _Border Nodes_ to the first container to display the parents of the current person.

Right-click on _PersonContainer_ and select the menu @New Diagram Element > Border Node@:

!./images/sirius_tuto2_17-01.png!

Set these properties to the border node:
* _Id_: @ParentNode@
* _Domain Class_: @basicfamily.Person@
* _Semantic Candidate Expression_: @feature:parents@

!./images/sirius_tuto2_17-02.png!

Add a _Square_ as style, and set these properties:
* _Label Position_: @Node@
* _Color_: @white@

Save the _odesign_ file, and now you can see the parents attached on the border of the first container:

!./images/sirius_tuto2_17-03.png!

To see the "result":#differences, have a look on the "tag":#tag : @border_node@

h4. Edge between containers

Like nodes, _Containers_ can be linked with _Edges_.

Right-click on the _Default_ container and select the menu @New Diagram Element > Relation Based Edge@.

!./images/sirius_tuto2_18-01.png!

Set these properties to the edge:

* _Id_: @SiblingsEdge@
* _Source Mapping_: @PersonContainer@
* _Target Mapping_: @SiblingsContainer@
* _Target Finder Expression_: @var:self@ (the second container represents the current person also)

!./images/sirius_tuto2_18-02.png!

On the style of the edge (automatically created), you can specify the end's decorators.

!./images/sirius_tuto2_18-03.png!

Save the _odesign_ file, and now you can see a link between the two containers.

!./images/sirius_tuto2_18-04.png!

To see the "result":#differences, have a look on the "tag":#tag : @container_edge@

h3(#Double_Click). Double-click

Now we can create a specific diagram for each person. To facilitate the navigation between all these diagrams, let's create a _Double Click_ tool that allows the user to navigate from any person on a diagram to its dedicated diagram.

Go back to the first diagram, right click on the _Section_ in the first _Layer_ and select the menu @New Element Edition > Double Click@.

!./images/sirius_tuto2_19-01.png!

On the *Mappings* property of the _Double Click_ select all the elements of the modeling tool that represent a _Person_ (except the two containers, since it doesn't make sense to navigate to the current diagram).

!./images/sirius_tuto2_19-02.png!

To specify the action of the _Double Click_, right-click on the _Begin_ and select the menu @New Operation > Navigation@.

!./images/sirius_tuto2_19-03.png!

Then set these properties to the _Navigation_ :
* *Diagram Description*: @Relationships diagram@
* *Creae if not Existent*: @true@

!./images/sirius_tuto2_19-04.png!

Save the _odesign_ file, close and reopen your diagrams. Now you can double-click on persons to open their corresponding _Relationships diagram_. If this diagram has not been created yet, Sirius will propose to create it.

!./images/sirius_tuto2_19-05.png!

To see the "result":#differences, have a look on the "tag":#tag : @double_click@

h3(#Table). Table

With Sirius it is also possible to represent model elements with a _Table_.

Let's create a table that lists all the persons, with this information for each:
* father's name
* mother's name
* number of children

Right-click on the _Viewpoint_ and select the menu @New representation > Edition Table Description@.

!./images/sirius_tuto2_20-01.png!

Set these properties to the table:
* _Id_: @Persons table@
* _Domain Class_: @basicfamily.Family@

!./images/sirius_tuto2_20-02.png!

In this table, you need lines to represent the persons. So, right-click on the _Table_ and select the menu @New Table Element > Line@.

!./images/sirius_tuto2_20-03.png!

Set these properties to the line:
* _Id_: @PersonLine@
* _Domain Class_: @basicfamily.Person@
* _Header Label Expression_ (tab _Label_): @feature:name@

!./images/sirius_tuto2_20-04.png!

Save the _odesign_ file then right-click on the _Family_ instance in the _Model Rrowser_ and click on the menu 'New Representation. You can see a new menu 'new Persons table'. 

!./images/sirius_tuto2_20-05.png!

If you select this menu, Sirius creates and opens a table with all the family's members.

!./images/sirius_tuto2_20-06.png!

Now, let's add columns to this table to display more information for each person. So, right-click on the _Table_ and select the menu @New Table Element > Feature Column@.

!./images/sirius_tuto2_20-07.png!

Set these properties to the column:
* _Id_: @fatherCol@
* _Feature Name_: @father@

!./images/sirius_tuto2_20-08.png!

Select the _Label_ tab and set these properties:
* _Header Label Expression_: @Father@
* _Label Expression_: @[if father.oclIsUndefined() then '' else father.name endif/]@

!./images/sirius_tuto2_20-09.png!

Copy and paste 'fatherCol' then rename @father@ by @mother@ in all the properties.

!./images/sirius_tuto2_20-10.png!

Save the _odesign_ file and see the two new columns.

!./images/sirius_tuto2_20-11.png!

Finally, add a new _Feature Column_ to display the number of children.

Set these properties to the column:
* _Id_: @childrenCol@
* _Feature Name_: @children@

!./images/sirius_tuto2_20-12.png!

Select the _Label_ tab and set these properties:
* _Header Label Expression_: @Children@
* _Label Expression_: @[children->size()/]@

!./images/sirius_tuto2_20-13.png!

Save the _odesign_ file and see the third column.

!./images/sirius_tuto2_20-14.png!


To see the "result":#differences, have a look on the "tag":#tag : @table_col@
